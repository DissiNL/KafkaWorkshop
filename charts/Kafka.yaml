apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: petshop
  namespace: petshop
spec:
  kafka:
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: kubectl.kubernetes.io/default-container
                      operator: In
                      values:
                        - kafka
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: "INFO"
    version: 3.2.0
    replicas: 1
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: external
        port: 9094
        type: nodeport
        tls: false
        authentication:
          type: scram-sha-512
        configuration:
          bootstrap:
            nodePort: 32100
          brokers:
            - broker: 0
              nodePort: 32101
              advertisedHost: broker-0.cluster.dissi.me
              advertisedPort: 32101
    authorization:
      type: simple
    config:
      auto.create.topics.enable: "false"
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
      inter.broker.protocol.version: "3.2"
    storage:
      type: persistent-claim
      size: 25Gi
      class: nfs-client
    resources:
      requests:
        memory: 8Gi
        cpu: "2"
  zookeeper:
    replicas: 1
    logging:
      type: inline
      loggers:
        zookeeper.root.logger: "INFO"

    storage:
      type: persistent-claim
      size: 25Gi
      class: nfs-client
    resources:
      requests:
        memory: 2Gi
        cpu: "2"
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-rule.runner
                      operator: In
                      values:
                        - kafka
  entityOperator:
    userOperator:
      watchedNamespace: petshop
      reconciliationIntervalSeconds: 15
      resources:
        requests:
          memory: 512Mi
          cpu: 200m

    topicOperator:
      watchedNamespace: petshop
      reconciliationIntervalSeconds: 15
      resources:
        requests:
          memory: 512Mi
          cpu: 200m


---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: pets
  namespace: petshop
  labels:
    strimzi.io/cluster: petshop
spec:
  partitions: 1
  replicas: 1
  config:
    retention.ms: -1
    cleanup.policy: compact
    segment.bytes: 1073741824
    delete.retention.ms: 100

---
#apiVersion: v1
#kind: Secret
#metadata:
#  name: kafka-admin-secret
#  namespace: petshop
#type: Opaque
#data:
#  password: dGVzdA==
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  name: admin
  namespace: petshop
  labels:
    strimzi.io/cluster: petshop
spec:
  authentication:
    type: scram-sha-512
    password:
      valueFrom:
        secretKeyRef:
          name: kafka-admin-secret
          key: password
  authorization:
    type: simple
    acls:
      # Example consumer Acls for topic my-topic using consumer group my-group
      - resource:
          type: topic
          name: pets
          patternType: literal
        operation: Read
        host: "*"
      - resource:
          type: topic
          name: pets
          patternType: literal
        operation: Describe
        host: "*"
      - resource:
          type: group
          name: admin-pets-group
          patternType: literal
        operation: Read
        host: "*"
      # Example Producer Acls for topic my-topic
      - resource:
          type: topic
          name: pets
          patternType: literal
        operation: Write
        host: "*"
      - resource:
          type: topic
          name: pets
          patternType: literal
        operation: Create
        host: "*"
      - resource:
          type: topic
          name: pets
          patternType: literal
        operation: Describe
        host: "*"
